Biz Dependency Injection'ın otomatik yapılandırılmasını farklı katmanlardan kullanmak istediimizde (aksi halde UI DAL'daki yapıyı direkt kullanmak zorunda kalır). O yarattığımız tiplerin D. Injection'a girebilmesi için o otomatik servis yapısını olusturmamız gerekir... Yani .Net Core bizim yeni yarattığımız tipi otomatik DI'a biz ona söylemeden çekemez...Dolayısıyla el ile instance almak zorunda kalırız...Ama bu da .Net Core'un tüm mimari prensipine aykırıdır.Farklı katmanlarda olduğumuz zaman da bu tipleri startup'tan belirtmek Katmanlı Mimari prensipine aykırıdır. Her ne kadar .NetCore bu konuda özgür gibi gözükse de bunu yapmamak en sağlıklısıdır ve profesyonel bir yaklaşımdır.Dolayısıyla bu Dependency Injection'ı farklı katmandan tetiklemek gerekir. Sorun şu ki Core da otomatik olarak gelen Dep. Inj. yapısı bizim class library olarak açtığımız şeyde gelmez.Class lib. nerden bilsin Dep. Injection'ı.
 Bizim elle dememiz lazımki sen bunu gördüğünde bunu vereceksin bunu gördüğünde bunu vereceksin...
 Bu projede  hem Autofac kütüphanesi ile farklı katmand Dep.Inj. sistemi hem de Autofac kütüphanesi olmadan farklı katmanda Dep.Inj. yöntemi uygulayacağım.

 *** Autofac : En cok tercih edilen DInj kütüphanesidir. Bu kütüphane sayesinde farklı bir katmanda bizim yapılarımız DI içerisine yerleştirilir. Bizi kendine bağımlı kılar.(DependencyResolvers isimli klasör içinde gösterdim)

 *** Manual DInj : Belirli durumlarda kütphaneye erişimimiz mümkün olmaybilir ya da fektif olmayabilir. Bu durumlarda da bizim Manual DInj yapabilmemiz gerekir. Bunun için extension method yaratırız.(ServiceExtensions isimli klasör içinde gösterdim)